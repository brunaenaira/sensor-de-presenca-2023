#include <ESP8266WiFi.h>
#include <PubSubClient.h>
//Pins definitions
#define BUZZER D4 // Alarme conectado ao GPIO-02/D4 do ESp8266
#define PIR D7 // Sensor de presenca conectado ao GPIO-16/D0 do ESp8266
#define LED D3
int waitingTime = 2000; // Tempo de espera em milisegundos

// WiFi
const char *ssid = "";        // Enter your WiFi name
const char *password = "";  // Enter WiFi password
// MQTT Broker
const char *mqtt_broker = "broker.emqx.io";
const char *topic = "ariane/renato";
const char *mqtt_username = "emqx";
const char *mqtt_password = "public";
const int mqtt_port = 1883;

WiFiClient espClient;
PubSubClient client(espClient);
void setup() {
  setupPin();
  // Set software serial baud to 115200;
  Serial.begin(115200);
  wifiConnect();
  // publish and subscribe
  // client.publish(topic, "hello emqx");
  // client.subscribe(topic);
}
void setupPin() {
  pinMode(PIR, INPUT); // Define p sensor de presenca como entrada
  pinMode(BUZZER, OUTPUT); // Define o alarme (buzzer) como saida
  pinMode(LED, OUTPUT); // Define o led como saida
  digitalWrite(BUZZER, LOW); // Inicializa o alarme como desligado
  digitalWrite(LED, LOW); // Inicializa o led como desligado
}
void checkAttendence() {
  int state = digitalRead(PIR); // Checa continuamente se ha presenca
  if (state == HIGH) {
    digitalWrite(BUZZER, HIGH); // Soa o alarme,...
    digitalWrite(LED, HIGH); //..acende o led,...
    delay(waitingTime); //..por 3 segundos ...
    digitalWrite(BUZZER, LOW); //..e entao para o alarme...
    digitalWrite(LED, LOW); //.. e desliga o led
    client.publish(topic, "Alert: Presence detect in the house!");  //Publica um aviso para o broker de que foi detectada presenca
  } else {
    digitalWrite(BUZZER, LOW); // Caso nao seja detectada presenca mantem o alarme desligado
    digitalWrite(LED, LOW); // Caso nao seja detectada presenca mantem o alarme desligado
  }
}
void wifiConnect() {
  // connecting to a WiFi network
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Connecting to WiFi..");
  }
  Serial.println("Connected to the WiFi network");
}
void brokerConnect() {
  //connecting to a mqtt broker
  client.setServer(mqtt_broker, mqtt_port);
  client.setCallback(callback);
  while (!client.connected()) {
    String client_id = "esp8266-client-";
    client_id += String(WiFi.macAddress());
    Serial.printf("The client %s connects to the public mqtt broker\n", client_id.c_str());
    if (client.connect(client_id.c_str(), mqtt_username, mqtt_password)) {
      Serial.println("Public emqx mqtt broker connected");
    } else {
      Serial.print("failed with state ");
      Serial.print(client.state());
      delay(2000);
    }
  }
}
void callback(char *topic, byte *payload, unsigned int length) {
  Serial.print("Message arrived in topic: ");
  Serial.println(topic);
  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
  Serial.println("-----------------------");
}

void loop() {
  client.loop();
  checkAttendence();
}
